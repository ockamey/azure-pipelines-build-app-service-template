trigger:
  branches:
    include:
      - main

pool: Self-hosted

variables:
  buildConfiguration: 'Release'

stages:
  - stage: 'Build'  
    displayName: 'Build'
    jobs:
      - job: 'Build'
        displayName: 'Build'
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: build
              arguments: --configuration $(buildConfiguration)
              projects: '**/*.sln'
          
          - task: DotNetCoreCLI@2
            inputs:
              workingDirectory: $(Build.SourcesDirectory)/src/web
              command: custom
              custom: tool
              arguments: restore

          - task: DotNetCoreCLI@2
            displayName: 'Run unit tests - $(buildConfiguration)'
            inputs:
              command: 'test'
              arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
              publishTestResults: true
              projects: '**/*.tests.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Create code coverage report'
            inputs:
              command: custom
              custom: tool
              workingDirectory: $(Build.SourcesDirectory)/src/web
              arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: true
              arguments: --no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: drop
  - stage: 'Deploy'
    displayName: 'Deploy'
    jobs:
      - deployment: 'Deploy'
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: ServiceConnectionDTA
                    appType: webAppLinux
                    appName: app-learn-dev-uks
                    package: '$(Pipeline.Workspace)/drop/*.zip'
  - stage: 'Deploy'
    displayName: 'Deploy'
    jobs:
      - deployment: 'Deploy'
        environment: tst
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: ServiceConnectionDTA
                    appType: webAppLinux
                    appName: app-learn-tst-uks
                    package: '$(Pipeline.Workspace)/drop/*.zip'